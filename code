from typing import List
import wave
import struct
import sys

def get_samples(wavefile: str) -> List[float]:
    """Returns a list of raw waveform values from a wav file
    Values will be returned a list of floats from -1.0 to 1.0.
    For simplicity, this function only supports wave files up to 1 MiB.
    >>> f"{get_samples('message.wav')[0]:0.2f}"
    '-0.09'
    >>> f"{get_samples('message.wav')[320]:0.2f}"
    '0.83'
    """
    samples = []
    with wave.open(wavefile, 'rb') as wav:
        for i in range(wav.getnframes()):
            samples.append(struct.unpack('<h', wav.readframes(1))[0] / 32768.0)
    return samples

def decode_bits(samples: List[float]) -> List[int]:
    """Returns a list of bits decoded from wave file samples
    This function assumes that samples are provided at a rate of 44100 per second
    and represent a transmission that is NRZ encoded at a baud rate of 300.
    >>> decode_bits([-.5]*500)
    [0, 0, 0]
    >>> decode_bits([.5]*500)
    [1, 1, 1]
    >>> decode_bits(get_samples('message.wav'))[0:10]
    [0, 0, 1, 1, 1, 0, 0, 1, 0, 1]
"""
    bits = []
    for i in range(73, len(samples), 147):
        if samples[i] < 0:
            bits.append(0)
        else:
            bits.append(1)
    return bits

def get_char(bits: List[int]) -> str:
    """Converts a list of 8 bits to a Python character
    Conversion assumes that bits are stored with the least significant
    bit first.
    >>> get_char([0, 1, 1, 1, 0, 0, 1, 0])
    'N'
    >>> get_char([0, 0, 0, 0, 1, 0, 1, 0])
    'P'
    >>> get_char([0, 1, 0, 0, 1, 1, 1, 0])
    'r'
    """
    for i in range(len(bits)):
        if bits[i] == 1:
            bits[i] = 2**i
    return chr(sum(bits))

def parse_byte(byte: List[int]) -> str:
    """Converts 10 bits with start and stop bit to a single character
    The stop and start bits are verified before the character is returned.
    >>> parse_byte([0, 0, 1, 1, 1, 0, 0, 1, 0, 1])  
    'N'
    >>> parse_byte([1, 0, 1, 1, 1, 0, 0, 1, 0, 1])
    Traceback (most recent call last):
    ...
    ValueError: Invalid start bit
    >>> parse_byte([0, 0, 1, 1, 1, 0, 0, 1, 0, 0])
    Traceback (most recent call last):
    ...
    ValueError: Invalid stop bit
    """
    for i in range(len(byte)):
        if byte[0] != 0:
            raise ValueError("Invalid start bit")
        elif byte[-1] != 1:
            raise ValueError("Invalid stop bit")
        else:
            return get_char(byte[1:-1])

def decode_string(bits: List[int]) -> str:
    """Creates a string from a list of raw bits
    >>> decode_string([0, 0, 1, 1, 1, 0, 0, 1, 0, 1])
    'N'
    >>> decode_string([0, 0, 1, 1, 1, 0, 0, 1, 0, 1]*3)
    'NNN'
    >>> next(decode_string([1, 0, 1, 1, 1, 0, 0, 1, 0, 1]))
    Traceback (most recent call last):
    ...
    ValueError: Invalid start bit
    >>> next(decode_string([0, 0, 1, 1, 1, 0, 0, 1, 0, 0]))
    Traceback (most recent call last):
    ...
    ValueError: Invalid stop bit
    """
    x = []
    for i in range(0, len(bits), 10):
        x.append(parse_byte(bits[i:i+10]))
    return ''.join(x)

def decode(wavefile: str) -> str:
    
    """Decode a wav file containing an NRZ encoded message
    >>> ''.join(decode('message.wav'))[0]
    'N'
    >>> ''.join(decode('message.wav'))[1]
    'o'
    >>> ''.join(decode('message.wav'))[-1]
    '!'
    >>> ''.join(decode('message.wav'))[-2]
    'g'
    >>> len(''.join(decode('message.wav')))
    82
    """
    return decode_string(decode_bits(get_samples(wavefile)))


if __name__ == "__main__":
    print("".join(decode(sys.argv[1])))
